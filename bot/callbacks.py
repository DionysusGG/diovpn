from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.admin_menu import get_restart_confirm
from config import ADMIN_IDS
from core.xray import reset_all_remote, create_vless_key
from database.db import (
    clear_all_cache, has_used_trial, set_trial_period, save_vless_key, 
    get_vless_key, check_and_give_referral_bonus, extend_key_period
)
from database.referral import get_referral_stats
from bot.texts import (
    TRIAL_ALREADY_USED_TEXT, TRIAL_SUCCESS_TEXT, MY_KEY_TEXT,
    REFERRAL_BONUS_RECEIVED
)
from datetime import datetime, timedelta
import uuid as uuidlib
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda c: c.data == "admin_restart_confirm")
async def admin_restart_confirm(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await call.message.edit_text("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database.models import reset_db
        reset_db()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        result = reset_all_remote()
        clear_all_cache()
        
        result_text = "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞\n" + result
        
    except Exception as e:
        result_text = f"–û—à–∏–±–∫–∞: {e}"
        logger.error(f"Restart error: {e}")
    
    for admin_id in ADMIN_IDS:
        await call.bot.send_message(admin_id, f"‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n{result_text}")
    await call.message.edit_text(f"‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n{result_text}")
from keyboards.admin_menu import get_restart_confirm
from config import ADMIN_IDS
from core.xray import reset_all_remote, create_vless_key
from database.db import (
    clear_all_cache, has_used_trial, set_trial_period, save_vless_key, 
    get_vless_key, check_and_give_referral_bonus, extend_key_period
)
from bot.texts import (
    TRIAL_ALREADY_USED_TEXT, TRIAL_SUCCESS_TEXT, MY_KEY_TEXT,
    REFERRAL_BONUS_RECEIVED
)
from datetime import datetime, timedelta
import uuid as uuidlib
import logging

logger = logging.getLogger(__name__)

router = Router()
@router.callback_query(lambda c: c.data == "admin_restart")
async def admin_restart(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await call.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫?", reply_markup=get_restart_confirm())

@router.callback_query(lambda c: c.data == "admin_restart_cancel")
async def admin_restart_cancel(call: CallbackQuery):
    await call.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.callback_query(lambda c: c.data == "admin_restart_confirm")
async def admin_restart_confirm(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await call.message.edit_text("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    try:
        result = reset_all_remote()
        clear_all_cache()
    except Exception as e:
        result = f"–û—à–∏–±–∫–∞: {e}"
        logger.error(f"Restart error: {e}")
    
    for admin_id in ADMIN_IDS:
        await call.bot.send_message(admin_id, f"‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n{result}")
    await call.message.edit_text(f"‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n{result}")


@router.callback_query(lambda c: c.data == "get_trial")
async def get_trial_callback(call: CallbackQuery):
    user_id = call.from_user.id
    logging.info(f"Trial request from user {user_id}")
    
    if has_used_trial(user_id):
        logging.info(f"User {user_id} already used trial")
        await call.answer(TRIAL_ALREADY_USED_TEXT, show_alert=True)
    else:
        now = datetime.now()
        end = now + timedelta(days=3)
        uuid_str = str(uuidlib.uuid4())
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ xray_manager
        try:
            logging.info(f"Creating VLESS key for user {user_id}")
            create_vless_key(uuid_str, 3, user_id)
        except Exception as e:
            logging.error(f"Error creating key for user {user_id}: {e}")
            import html
            await call.message.answer(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–ª—é—á–∞: {html.escape(str(e))}", parse_mode=None)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        logging.info(f"Setting trial period for user {user_id}")
        set_trial_period(user_id, now.isoformat(), end.isoformat())
        save_vless_key(user_id, uuid_str, end.isoformat())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        logging.info(f"Checking referral bonus for trial activation by user {user_id}")
        referrer_id = check_and_give_referral_bonus(user_id)
        if referrer_id:
            logging.info(f"Found referrer {referrer_id} for user {user_id}, extending subscription")
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –Ω–∞ 3 –¥–Ω—è
            key_info = get_vless_key(referrer_id)
            if key_info[0]:  # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
                    bonus_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å 3 –¥–Ω—è", callback_data=f"claim_bonus_{key_info[0]}")],
                    ])
                    await call.bot.send_message(
                        referrer_id,
                        REFERRAL_BONUS_RECEIVED,
                        reply_markup=bonus_keyboard,
                        parse_mode="HTML"
                    )
                    logging.info(f"Sent bonus notification to referrer {referrer_id}")
                except Exception as e:
                    logging.error(f"Error extending key for referrer {referrer_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        vless_url = f"vless://{uuid_str}@213.218.238.165:443?security=reality&type=tcp&flow=xtls-rprx-vision&sni=www.microsoft.com&fp=chrome&pbk=hUmvvDrvaA64rmZMO4fINNi9LQR2MfUjV0XChO9-sWM&sid=9591ef292fb31c63#{call.from_user.first_name}"
        logging.info(f"Generated VLESS URL for user {user_id}")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á
            await call.message.edit_text(TRIAL_SUCCESS_TEXT.format(key=vless_url))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            from keyboards.main_menu import get_instruction_menu
            await call.message.answer(
                "üì± –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
                reply_markup=get_instruction_menu()
            )
        except:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await call.message.answer(TRIAL_SUCCESS_TEXT.format(key=vless_url))
            
            from keyboards.main_menu import get_instruction_menu
            await call.message.answer(
                "üì± –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
                reply_markup=get_instruction_menu()
            )
        
        try:
            await call.answer()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback

@router.callback_query(lambda c: c.data == "my_key")
async def my_key_callback(call: CallbackQuery):
    user_id = call.from_user.id
    uuid_str, expires_at = get_vless_key(user_id)
    if not uuid_str:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞.", show_alert=True)
        return
    
    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
    try:
        days_left = (datetime.fromisoformat(expires_at) - datetime.now()).days
        if days_left < 0:
            days_left = 0
    except Exception:
        days_left = 0
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")]
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referral_count, available_bonus_days, used_bonus_days = get_referral_stats(user_id)
    total_days = days_left + available_bonus_days
    
    vless_url = f"vless://{uuid_str}@213.218.238.165:443?security=reality&type=tcp&flow=xtls-rprx-vision&sni=www.microsoft.com&fp=chrome&pbk=hUmvvDrvaA64rmZMO4fINNi9LQR2MfUjV0XChO9-sWM&sid=9591ef292fb31c63#{call.from_user.first_name}"
    await call.message.edit_text(
        MY_KEY_TEXT.format(
            key=vless_url,
            days=days_left,
            bonus_days=available_bonus_days,
            total_days=days_left + available_bonus_days
        ),
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(lambda c: c.data.startswith("claim_bonus_"))
async def claim_bonus(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
    user_id = call.from_user.id
    key_uuid = call.data.replace("claim_bonus_", "")
    logging.info(f"User {user_id} claiming bonus for key {key_uuid}")
    
    try:
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∫–ª—é—á –Ω–∞ 3 –¥–Ω—è
        new_expiry = extend_key_period(user_id, key_uuid, 3)
        if new_expiry:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
            from datetime import datetime
            exp_date = datetime.fromisoformat(new_expiry).strftime('%d.%m.%Y')
            
            await call.message.edit_text(
                f"‚úÖ <b>–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 3 –¥–Ω—è\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {exp_date}",
                parse_mode="HTML"
            )
            logging.info(f"Successfully extended key for user {user_id} until {new_expiry}")
        else:
            await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å", show_alert=True)
            logging.error(f"Failed to extend key for user {user_id}")
    except Exception as e:
        logging.error(f"Error claiming bonus for user {user_id}: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞", show_alert=True)

def register_callbacks(dp):
    dp.include_router(router)
