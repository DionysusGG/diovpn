from database.db import (
    add_user, get_vless_key, extend_key_period, _get_db
)
from database.referral import (
    save_referrer, get_referral_link, get_referral_stats,
    get_referral_count
)
from aiogram import Router, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, PreCheckoutQuery, CallbackQuery
from keyboards.main_menu import get_main_menu, get_buy_menu, get_referral_menu
from keyboards.admin_menu import get_admin_menu
from config import ADMIN_IDS
from bot.texts import (
    WELCOME_TEXT, REFERRAL_MENU_TEXT,
    REFERRAL_INVALID, SELF_REFERRAL_ERROR
)
from datetime import datetime, timedelta
import re
import logging

router = Router()

from utils.helpers import parse_date

def get_pay_menu(period, price, callback_back):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí∏ –û–ø–ª–∞—Ç–∏—Ç—å {price}‚≠ê", callback_data=f"pay_{period}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_back)],
    ])

@router.callback_query(lambda c: c.data == "admin_back")
async def admin_back(call: types.CallbackQuery):
    await call.message.delete()

@router.callback_query(lambda c: c.data == "buy_menu")
async def buy_menu(call: types.CallbackQuery):
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_buy_menu()
    )

@router.callback_query(lambda c: c.data.startswith("buy_"))
async def buy_period(call: types.CallbackQuery):
    periods = {
        "buy_1m": ("1 –º–µ—Å—è—Ü", "99"),
        "buy_3m": ("3 –º–µ—Å—è—Ü–∞", "249"),
        "buy_6m": ("6 –º–µ—Å—è—Ü–µ–≤", "449"),
        "buy_12m": ("1 –≥–æ–¥", "799"),
    }
    period_key = call.data
    period, price = periods.get(period_key, (None, None))
    if not period:
        await call.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞", show_alert=True)
        return
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{period}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}‚≠ê</b>\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_pay_menu(period_key, price, "buy_menu")
    )

@router.callback_query(lambda c: c.data.startswith("pay_"))
async def pay_period(call: types.CallbackQuery):
    periods = {
        "pay_buy_1m": ("1 –º–µ—Å—è—Ü", "99", 30),
        "pay_buy_3m": ("3 –º–µ—Å—è—Ü–∞", "249", 90),
        "pay_buy_6m": ("6 –º–µ—Å—è—Ü–µ–≤", "449", 180),
        "pay_buy_12m": ("1 –≥–æ–¥", "799", 365),
    }
    period_key = call.data.replace("pay_", "buy_")
    period_info = periods.get(call.data)
    if not period_info:
        await call.answer("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)
        return
    
    period, price, days = period_info
    
    await call.bot.send_invoice(
        chat_id=call.from_user.id,
        title=f"VPN –Ω–∞ {period}",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å –Ω–∞ {period}",
        payload=f"{call.from_user.id}:{days}",  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        provider_token="",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω Stars
        currency="XTR",
        prices=[{"label": f"VPN –Ω–∞ {period}", "amount": int(price)}],
        start_parameter="vpn_subscription",
        photo_url="",  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False
    )
    await call.message.delete()

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(lambda message: message.successful_payment)
async def process_successful_payment(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = message.successful_payment
    payload = payment.invoice_payload
    user_id, days = map(int, payload.split(":"))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from core.xray import create_vless_key
    from database.db import save_vless_key
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    end_date = datetime.now() + timedelta(days=days)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    uuid = await create_vless_key()
    if uuid:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑—É
        save_vless_key(user_id, uuid, end_date)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í–∞—à VPN –∫–ª—é—á —Å–æ–∑–¥–∞–Ω –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ–π –∫–ª—é—á' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        from keyboards.main_menu import get_instruction_menu
        await message.answer(
            "üì± –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
            reply_markup=get_instruction_menu()
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu()
        )

@router.callback_query(lambda c: c.data == "main_back")
async def main_back(call: types.CallbackQuery):
    await call.message.edit_text(
        WELCOME_TEXT,
        reply_markup=get_main_menu()
    )

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    logging.info(f"Start command from user {user_id}: {message.text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(message.text.split()) > 1:
        ref_arg = message.text.split()[1]
        if ref_arg.startswith('ref_'):
            try:
                referrer_id = int(ref_arg[4:])
                logging.info(f"Referral detected: user {user_id} invited by {referrer_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª—å—Å—Ç–≤–æ
                if referrer_id == user_id:
                    logging.warning(f"Self-referral attempt by user {user_id}")
                    await message.answer(SELF_REFERRAL_ERROR)
                    add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
                add_user(user_id, referrer_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
                from database.db import _get_db
                with _get_db() as conn:
                    saved_referrer = conn.execute(
                        "SELECT referrer_id FROM users WHERE telegram_id = ?",
                        (user_id,)
                    ).fetchone()
                logging.info(f"Saved referrer for user {user_id}: {saved_referrer}")
                
            except ValueError as e:
                logging.error(f"Invalid referral format: {ref_arg}, error: {e}")
                await message.answer(REFERRAL_INVALID)
                add_user(user_id)
                return
    else:
        # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        add_user(user_id)
    
    await message.answer(WELCOME_TEXT, reply_markup=get_main_menu())

@router.message(Command("admin"))
async def admin_menu(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())

@router.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(call: types.CallbackQuery):
    from database.db import get_trial_users_info
    users = get_trial_users_info()
    if not users:
        text = "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º."
    else:
        lines = ["–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:"]
        for uid, start, end in users:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            start_date = parse_date(start).strftime('%d/%m/%Y %H:%M')
            end_date = parse_date(end).strftime('%d/%m/%Y %H:%M')
            lines.append(f"ID: {uid}\n–ü–æ–ª—É—á–µ–Ω: {start_date}\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}")
        text = "\n\n".join(lines)
    await call.message.edit_text(text, reply_markup=get_admin_menu())

@router.callback_query(lambda c: c.data == "admin_keys")
async def admin_keys(call: types.CallbackQuery):
    from database.db import get_all_active_keys
    keys = get_all_active_keys()
    if not keys:
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π."
    else:
        lines = ["–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:"]
        for user_id, uuid, expires_at in keys:
            exp_date = parse_date(expires_at)
            days_left = (exp_date - datetime.now()).days
            lines.append(
                f"ID: {user_id}\n"
                f"–ö–ª—é—á: {uuid}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {exp_date.strftime('%d/%m/%Y %H:%M')}"
            )
        text = "\n\n".join(lines)
    await call.message.edit_text(text, reply_markup=get_admin_menu())

@router.callback_query(lambda c: c.data == "renew")
async def renew_subscription(call: types.CallbackQuery):
    from database.db import get_user_active_key
    key_info = get_user_active_key(call.from_user.id)
    
    if not key_info:
        await call.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–ª—é—á, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å'.",
            reply_markup=get_main_menu()
        )
        return
    
    uuid, expires_at = key_info
    exp_date = parse_date(expires_at)
    days_left = (exp_date - datetime.now()).days
    
    await call.message.edit_text(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â—ë {days_left} –¥–Ω–µ–π (–¥–æ {exp_date.strftime('%d.%m.%Y %H:%M')}).\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        reply_markup=get_buy_menu()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –º–µ–Ω—é, —á—Ç–æ –∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    )

@router.message(CommandStart(deep_link=True))
async def cmd_start_ref(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"""
    logging.info(f"Start command with args from user {message.from_user.id}: {message.text}")
    
    referral_arg = message.text.split()[1]
    if referral_arg.startswith('ref_'):
        try:
            referrer_id = int(referral_arg[4:])
            logging.info(f"Parsed referrer_id: {referrer_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª—å—Å—Ç–≤–æ
            if referrer_id == message.from_user.id:
                logging.warning(f"Self-referral attempt by user {message.from_user.id}")
                await message.answer(SELF_REFERRAL_ERROR)
                add_user(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
            logging.info(f"Adding user {message.from_user.id} with referrer {referrer_id}")
            add_user(message.from_user.id, referrer_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            from database.db import _get_db
            with _get_db() as conn:
                result = conn.execute(
                    "SELECT referrer_id FROM users WHERE telegram_id = ?",
                    (message.from_user.id,)
                ).fetchone()
                logging.info(f"Database check after add_user: {result}")
            
        except ValueError as e:
            logging.error(f"Invalid referral format: {referral_arg}, error: {e}")
            await message.answer(REFERRAL_INVALID)
            add_user(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            return
        except Exception as e:
            logging.error(f"Unexpected error in cmd_start_ref: {e}")
            await message.answer(REFERRAL_INVALID)
            add_user(message.from_user.id)
            return
    else:
        logging.info(f"Regular start without referral for user {message.from_user.id}")
        add_user(message.from_user.id)
    
    await cmd_start(message)

@router.callback_query(lambda c: c.data == "invite_friend")
async def invite_friend(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    user_id = call.from_user.id
    logging.info(f"Showing referral menu for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    bot = await call.bot.get_me()
    referral_link = get_referral_link(user_id, bot.username)
    logging.info(f"Generated referral link: {referral_link}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referral_count, available_bonus_days, used_bonus_days = get_referral_stats(user_id)
    logging.info(f"Referral stats for user {user_id}: count={referral_count}, available={available_bonus_days}, used={used_bonus_days}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        uuid_str, expires_at = get_vless_key(user_id)
        remaining_days = 0
        if expires_at:
            try:
                remaining_days = (datetime.fromisoformat(expires_at) - datetime.now()).days
                if remaining_days < 0:
                    remaining_days = 0
            except Exception as e:
                logging.error(f"Error calculating remaining days: {e}")
                
        total_days = remaining_days + available_bonus_days
        
        await call.message.edit_text(
            REFERRAL_MENU_TEXT.format(
                invited=referral_count,
                days=available_bonus_days,
                remaining_days=remaining_days,
                total_days=total_days
            ),
            reply_markup=get_referral_menu(referral_link, referral_count),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error showing referral menu to user {user_id}: {e}")
        try:
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é", show_alert=True)
        except:
            pass

@router.callback_query(lambda c: c.data == "copy_ref_link")
async def copy_ref_link(call: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        bot = await call.bot.get_me()
        referral_link = get_referral_link(call.from_user.id, bot.username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await call.message.answer(
            f"<code>{referral_link}</code>",
            parse_mode="HTML"
        )
        
        try:
            await call.answer("–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç", show_alert=False)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback
            
    except Exception as e:
        logging.error(f"Error in copy_ref_link: {e}")
        try:
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass
    
@router.callback_query(lambda c: c.data == "ref_stats")
async def ref_stats(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        referral_count = get_referral_count(call.from_user.id)
        days_earned = referral_count * 3
        
        try:
            await call.answer(
                f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {referral_count} –¥—Ä—É–∑–µ–π\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π: {days_earned}",
                show_alert=True
            )
        except:
            await call.message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referral_count}\n"
                f"‚è∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π: {days_earned}"
            )
            
    except Exception as e:
        logging.error(f"Error in ref_stats: {e}")
        try:
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass

def register_handlers(dp):
    dp.include_router(router)
