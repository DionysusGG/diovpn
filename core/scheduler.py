from datetime import datetime
import asyncio
import logging
from database.db import DB_PATH, get_keys_expiring_soon
import sqlite3
from core.xray import remove_vless_key
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN
from bot.handlers import parse_date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def get_days_word(days: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–¥–Ω–∏'"""
    if days % 10 == 1 and days % 100 != 11:
        return "–¥–µ–Ω—å"
    elif 2 <= days % 10 <= 4 and (days % 100 < 10 or days % 100 >= 20):
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"

async def send_expiration_notice(bot: Bot, user_id: int, days_left: int, expires_at: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–ª—é—á–∞"""
    exp_date = parse_date(expires_at)
    formatted_date = exp_date.strftime('%d/%m/%Y %H:%M')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")]
    ])
    
    text = (f"‚ö†Ô∏è –í–∞—à VPN –∫–ª—é—á –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} {get_days_word(days_left)}!\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {formatted_date}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø:")
    try:
        await bot.send_message(user_id, text, reply_markup=keyboard)
    except Exception as e:
        print(f"Failed to send notification to {user_id}: {e}")

async def check_expired_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    session = AiohttpSession()
    bot = Bot(
        token=BOT_TOKEN,
        session=session,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    try:
        while not asyncio.current_task().cancelled():
            try:
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
                with sqlite3.connect(DB_PATH) as conn:
                    cur = conn.cursor()
                    cur.execute("""
                        SELECT telegram_id, uuid FROM keys 
                        WHERE expires_at < ?
                    """, (current_time,))
                    expired_keys = cur.fetchall()
                    
                    # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–ª—é—á
                    for telegram_id, uuid in expired_keys:
                        try:
                            await remove_vless_key(uuid)
                            cur.execute("""
                                DELETE FROM keys 
                                WHERE telegram_id = ? AND uuid = ?
                            """, (telegram_id, uuid))
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ {uuid[:8]}: {e}")
                    conn.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç
                expiring_keys = get_keys_expiring_soon(days_threshold=3)
                for telegram_id, uuid, expires_at in expiring_keys:
                    try:
                        days_left = (parse_date(expires_at) - datetime.now()).days
                        if days_left in [1, 3]:  # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞ 3 –¥–Ω—è –∏ –∑–∞ 1 –¥–µ–Ω—å
                            formatted_date = parse_date(expires_at).strftime('%d/%m/%Y %H:%M')
                            await send_expiration_notice(bot, telegram_id, days_left, formatted_date)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ {uuid[:8]}: {e}")
                        
            except asyncio.CancelledError:
                raise
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            try:
                await asyncio.sleep(3600)
            except asyncio.CancelledError:
                raise
                
    finally:
        await bot.session.close()
